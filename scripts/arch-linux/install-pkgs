#!/usr/bin/env bash

aur_helpers=( yay aurman pakku pacaur trizen aura pikaur )

pacman_fetch_pkg() {
    [ $(pacman -Ss $1 | wc -l) -ne 0 ]
    return $?
}

aur_helper_fetch_pkg() {
    aur_helper=""

    for helper in "$aur_helpers"; do
        if type -p "$helper" > /dev/null; then
            aur_helper=$helper
            break
        fi
    done

    if [ "$aur_helper" = "" ]; then
        return 1
    fi

    [ $($aur_helper -Ss $1 | wc -l) -ne 0 ]
    return $?
}

aur_fetch_pkg() {
    [ $(git ls-remote https://aur.archlinux.org/$1.git | wc -l) -ne 0 ]
    return $?
}

aur_helper_install() {
    aur_helper=""

    for helper in "$aur_helpers"; do
        if type -p $helper > /dev/null; then
            aur_helper=$helper
            break
        fi
    done

    if [ "$aur_helper" = "" ]; then
        return 1
    fi

    $aur_helper --noconfirm -S $1
    return $?
}

aur_repos_install() {
    rm -rf /tmp/$1
    repo=$1
    ! fetch_pkg $repo && repo="$1-git"
    remote=https://aur.archlinux.org/$repo.git
    git clone $remote /tmp/$repo > /dev/null
    pushd /tmp/$repo
    yes | makepkg -si
    res=$?
    popd
    return $res
}

aur_install() {
    aur_helper_install $1 || aur_repos_install $1
    return $?
}

fetch_pkg() {
    pacman_fetch_pkg $1 || aur_helper_fetch_pkg $1 || aur_fetch_pkg $1
    return $?
}

pkg_install() {
    ! pacman_fetch_pkg $1 && aur_install $1 || sudo pacman --noconfirm --needed -S $1
}

pkg_exists() {
    fetch_pkg $1 || fetch_pkg "$1-git"
    return $?
}
