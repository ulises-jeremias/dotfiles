#!/usr/bin/env bash

## Copyright (C) 2019-2022 Ulises Jeremias Cornejo Fandos
## Licensed under MIT
##
##     @script.name [OPTION] ARGUMENTS...
##
## Options:
##     -h, --help                            Help.
##     -u, --upgrade                         Will update dependencies even if they are already installed.
##
##         --os=OS_NAME                      Operating System. Posible values: common | arch-linux | debian | ...
##                                           where common is supposed to work correctly with any linux distro.
##                                           `common` is set as default value for this flag.
##         --log-file=LOG_FILE_PATH          Logs file path, is /tmp/dots_install_log_$(date +'%m-%d-%y_%H:%M:%S').txt by default.
##

set -e

ROOT="$(realpath "$(dirname "$0")")"
DOTFILES_DIR=$(realpath "${ROOT}")

. /opt/dots/util/easy-options/easyoptions.sh
. /opt/dots/util/logs.sh

# override OS with a correct value with the given params
. /opt/dots/util/os.sh

#==========================================
# Default argument values and preprocessing
#==========================================
os=${os:-""}
time_str=$(date +'%m-%d-%y_%H:%M:%S')
log_file=${log_file:-"/tmp/dots_install_log_$time_str.txt"}

[ ! -f "${log_file}" ] && touch "${log_file}"

. /opt/dots/"${os}"/install-pkgs.sh

#==========================================
# Installing process
#==========================================
describe "Starting process" 0

update_db

success=0
failed=0

get_pkgs() {
  # get all pkgs.list.${os} files from all dirs inside "${DOTFILES_DIR}"/config
  # and then get all lines from all files
  # note: not all directories have a pkgs.list.${os} file

  pkgs=$(find "${DOTFILES_DIR}"/config -name "pkgs.list.${os}" -exec cat {} \;)

  # remove empty lines
  pkgs=$(echo "${pkgs}" | sed '/^$/d')

  # remove comments
  pkgs=$(echo "${pkgs}" | sed '/^#/d')

  # remove duplicates
  pkgs=$(echo "${pkgs}" | sort | uniq)

  echo "${pkgs}"
}

for pkg in $(get_pkgs); do
  describe "Fetching ${pkg}"
  if type -p "${pkg}" >/dev/null && [ -z "$upgrade" ]; then
    log_success "Already installed" "${pkg}" "${log_file}"
    ((success += 1))
  else
    if ! pkg_exists "${pkg}"; then
      log_failed "Package not found" "${pkg}" "${log_file}"
      ((failed += 1))
      continue
    fi

    log_warn "Package not installed" "${pkg}" "${log_file}"

    describe "Installing ${pkg}" 0
    if pkg_install "${pkg}"; then
      log_success "Installed successfully" "${pkg}" "${log_file}"
      ((success += 1))
    else
      log_failed "Installation failed" "${pkg}" "${log_file}"
      ((failed += 1))
    fi
  fi
done

all=$((success + failed))

echo
echo "${GREEN}Success: ${success} ${RED}Failed: ${failed}${REET} Total: ${all}"
