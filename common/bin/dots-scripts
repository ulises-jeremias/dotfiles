#!/usr/bin/env bash

## Copyright (C) 2019-2022 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## Check full documentation at: https://github.com/ulises-jeremias/dotfiles/wiki
##
##     @script.name [SCRIPT_NAME] [OPTION] ARGUMENTS...
##
## Options:
##     -h, --help                            Show this help message.
##     -l, --list                            List all available scripts.
##

show_message_with_usage() {
    [[ -z "$documentation" ]] && parse_documentation
    echo "$documentation"
    echo
    echo "$1"
    exit 1
}

# if ~/.local/bin is not in the PATH, add it
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:${PATH}"
fi

NO_HELP=true
NO_CHECK=true
source /opt/dots/util/easy-options/easyoptions.sh || exit

scripts_list=(
    "brightness: control the brightness of the screen using different backends such us xbacklight, brightnessctl, blight or xrandr"
    "check-network: check if the network is up"
    "checkupdates: check for updates"
    "feh-blur: blur the background of the current window when using feh to set the background"
    "git-notify: notify when a git commit is made"
    "microphone: control the microphone"
    "monitor: print the current monitor name"
    "next-workspace: switch to next existing workspace"
    "night-mode: toggle night mode"
    "openweathermap-detailed: print the detailed weather information"
    "popup-calendar: show a calendar in a popup"
    "rofi-bluetooth: show a rofi menu to manage bluetooth devices"
    "rofi-randr: show a rofi menu to manage the screen resolution"
    "rofi-run: show a rofi menu to run commands"
    "rofi-xrandr: show a rofi menu to manage the screen resolution with charts"
    "screenshooter: take a screenshot"
    "spotify: get the current song playing in spotify"
    "sysupdate: update the system"
    "toggle: toggle the state of some applications"
    "updates: check for updates"
    "weather: print the current weather information"
)

script=${arguments[0]}

if [[ -n "${script}" ]]; then
    if [[ ! "${scripts_list[*]}" =~ ${script} ]]; then
        show_message_with_usage "Invalid script specified."
    fi

    LOCAL_BIN_DIR="${HOME}/.local/bin"

    if [[ ! -x "${LOCAL_BIN_DIR}/dots-${script}" ]]; then
        show_message_with_usage "Script not found: ${LOCAL_BIN_DIR}/dots-${script}"
    fi

    "${LOCAL_BIN_DIR}/dots-${script}" "${@:2}"
    exit $?
fi

if [[ -n "${list}" ]]; then
    for script in "${scripts_list[@]}"; do
        script_name=$(echo "${script}" | cut -d ':' -f 1)
        script_desc=$(echo "${script}" | cut -d ':' -f 2)
        echo -e "$(tput setaf 3)${script_name}$(tput sgr0) $(tput setaf 7)${script_desc}$(tput sgr0)"
    done
    exit
fi

if [[ -n "${help}" ]]; then
    [[ -z "$documentation" ]] && parse_documentation
    echo "$documentation"
    exit
fi

show_message_with_usage "No script specified."
