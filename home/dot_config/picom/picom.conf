# Enables patches for specific window managers.
# Currently patched: "awesome", "dwm", "herb"
wm-support = "none";

#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
# corner-radius = 12;
corner-radius = 4;

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
    "class_g *= 'Polybar'",
    "window_type = 'dock'",
    "class_g = 'bar'",
    "name *= 'polybar'",
]

#################################
#
# Backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "xrender";

#################################
#
# Shadows
#
#################################

shadow = true;

# The blur radius for shadows, in pixels. (defaults to 16)
shadow-radius = 12;

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.1;

# The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -15;

# The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -15;

# Red color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0;

# Green color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-green = 0;

# Blue color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-blue = 0;

# Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000). This option will override options set shadow-(red/green/blue)
# shadow-color = "#000000";

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "! name~=''",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "name *= 'Fcitx'",
    "name *= 'polybar'",
    "name *= 'rofi'",
    "name *= 'jgmenu'",
    "class_g *= 'tim.exe'",
    "class_g *= 'wechat.exe'",
    "class_g *= 'Dunst'",
    "class_g = 'i3-frame'",
    "class_g = 'Conky'",
    "class_g = 'GLava'",
    "class_g ?= 'Notify-osd'"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = true;

#################################
#
# Transparency / Opacity
#
#################################

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;

# Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
# like `50:name *= "Firefox"`. picom-trans is recommended over this.
# Note we don't make any guarantee about possible conflicts with other
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
# example:
#    opacity-rule = [ "80:class_g = 'URxvt'" ];
#
# opacity-rule = []
opacity-rule = [
    "100:name      = 'Dunst'"
];

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
blur-background = true;
# Blur background of opaque windows with transparent frames as well.
blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur: {
	method = "dual_kawase";
    strength = 8;
}
# blur:
# {
#  method = "gaussian";
#  size = 20;
#  deviation = 15.0;
# };
blur-background-fixed = true;
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "name *= 'rofi'",
    "name *= 'jgmenu'",
    "class_g *= 'Dunst'",
];

#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
fading = true;
# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 10;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.04;
# Opacity change between steps while fading out. (default 0.04).
fade-out-step = 0.03;
# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [
    "name *= 'Fcitx'",
    "name *= 'rofi'",
    "name *= 'jgmenu'",
    "! name~=''",
];

#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = false;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Vertical synchronization: match the refresh rate of the monitor
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [
    "! name~=''",
    "name *= 'VLC'",
    "name *= 'Guvcview'",
    "name *= 'jetbrains-pycharm'",
    "name *= 'jetbrains-clion'",
    "name *= 'jetbrains-webstorm'",
    "name *= 'jetbrains-goland'",
    "name *= 'jetbrains-idea-ce'",
    "name *= 'processing-app-Base'",
    "name *= 'Code'",
    "name *= 'code-oss'",
    "name *= 'MATLAB R2020a'",
    "name *= 'Steam'",
    "name *= 'mpv'",
    "name *= 'rofi'",
    "name *= 'jgmenu'",
    "name *= 'Logisim'",
    "name *= 'Chrome'",
    "name *= 'Firefox'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "name *= 'Brave'"
];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
    dock = { shadow = false; clip-shadow-above = true; }
    dnd = { shadow = false; }
    popup_menu = { opacity = 0.85; }
    dropdown_menu = { opacity = 0.85; }
};

######################
#
# XSync
# See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = false;


######################
# Picom Rules
######################
@include "picom-rules.conf"
