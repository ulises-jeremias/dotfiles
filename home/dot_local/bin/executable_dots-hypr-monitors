#!/usr/bin/env bash

## Copyright (C) 2019-2025 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## Check full documentation at: https://github.com/ulises-jeremias/dotfiles/wiki
##
## Show a rofi menu to manage monitor configuration in Hyprland

if ! command -v hyprctl >/dev/null 2>&1; then
  echo "Command not found: hyprctl. This script requires Hyprland."
  notify-send "$0: Command not found: hyprctl. This script requires Hyprland." -u critical
  exit 1
fi

if ! command -v rofi >/dev/null 2>&1; then
  echo "Command not found: rofi. Please install it."
  notify-send "$0: Command not found: rofi. Please install it." -u critical
  exit 1
fi

# Get monitor information
get_monitors() {
  hyprctl monitors -j | jq -r '.[] | "\(.name)|\(.width)x\(.height)@\(.refreshRate)|\(.transform)|\(.scale)"'
}

# List available monitors
list_monitors() {
  while IFS='|' read -r name resolution transform scale; do
    echo "󰍹 $name - $resolution (Scale: $scale)"
  done < <(get_monitors)
}

# Print menu options
print_menu() {
  echo "󰍺 Internal Only"
  echo "󰍹 External Only"
  echo "󰹑 Extend Right"
  echo "󰹑 Extend Left"
  echo "󰹑 Extend Above"
  echo "󰹑 Extend Below"
  echo "󰍷 Mirror Displays"
  echo "󰑊 Disable All External"
  echo "──────────────"
  list_monitors
}

# Get internal and external monitors
internal=$(hyprctl monitors -j | jq -r '.[] | select(.name | startswith("eDP")) | .name' | head -n 1)
external=$(hyprctl monitors -j | jq -r '.[] | select(.name | startswith("eDP") | not) | .name' | head -n 1)

# Fallback if naming convention doesn't match
if [ -z "$internal" ]; then
  internal=$(hyprctl monitors -j | jq -r '.[0].name')
fi

if [ -z "$external" ]; then
  # Get second monitor if available
  external=$(hyprctl monitors -j | jq -r '.[1].name // empty')
fi

# Execute monitor configuration
case "$(print_menu | rofi -dmenu -i -p "Monitor Setup" -format i -theme ~/.config/rofi/applets.rasi)" in
  0) # Internal Only
    if [ -n "$external" ]; then
      hyprctl keyword monitor "$external,disable"
    fi
    hyprctl keyword monitor "$internal,preferred,auto,1"
    ;;
  1) # External Only
    if [ -n "$external" ]; then
      hyprctl keyword monitor "$internal,disable"
      hyprctl keyword monitor "$external,preferred,auto,1"
    fi
    ;;
  2) # Extend Right
    if [ -n "$external" ]; then
      internal_width=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$internal\") | .width")
      hyprctl keyword monitor "$internal,preferred,0x0,1"
      hyprctl keyword monitor "$external,preferred,${internal_width}x0,1"
    fi
    ;;
  3) # Extend Left
    if [ -n "$external" ]; then
      external_width=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$external\") | .width")
      hyprctl keyword monitor "$external,preferred,0x0,1"
      hyprctl keyword monitor "$internal,preferred,${external_width}x0,1"
    fi
    ;;
  4) # Extend Above
    if [ -n "$external" ]; then
      external_height=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$external\") | .height")
      hyprctl keyword monitor "$external,preferred,0x0,1"
      hyprctl keyword monitor "$internal,preferred,0x${external_height},1"
    fi
    ;;
  5) # Extend Below
    if [ -n "$external" ]; then
      internal_height=$(hyprctl monitors -j | jq -r ".[] | select(.name == \"$internal\") | .height")
      hyprctl keyword monitor "$internal,preferred,0x0,1"
      hyprctl keyword monitor "$external,preferred,0x${internal_height},1"
    fi
    ;;
  6) # Mirror
    if [ -n "$external" ]; then
      hyprctl keyword monitor "$internal,preferred,0x0,1,mirror,$external"
    fi
    ;;
  7) # Disable All External
    hyprctl monitors -j | jq -r '.[] | select(.name | startswith("eDP") | not) | .name' | while read -r mon; do
      hyprctl keyword monitor "$mon,disable"
    done
    ;;
esac

notify-send "Monitor Configuration" "Applied successfully" -i video-display
