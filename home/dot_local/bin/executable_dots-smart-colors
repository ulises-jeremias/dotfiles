#!/usr/bin/env bash

## Copyright (C) 2019-2025 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## Smart color palette analyzer and theme-adaptive color selector
## Analyzes your current X resources color palette and suggests the best colors
## for different semantic concepts (error, warning, success, info, etc.)
##
## Usage:
##     @script.name [OPTION] ARGUMENTS...
##
## Options:
##     -h, --help                            Show this help message.
##     -a, --analyze                         Analyze current palette and show recommendations.
##     -c, --colors                          Show visual color palette with blocks.
##     -e, --export                          Export color variables for shell/polybar.
##         --concept=CONCEPT                 Get best color for specific concept (error|warning|success|info|accent|red|green|blue|yellow|cyan|magenta|orange|pink|brown|white|black|gray|background|background-alt|foreground|foreground-alt).
##         --format=FORMAT                   Output format: hex, rgb, polybar, eww, scss, i3, files (default: hex).
##         --generate                        Generate all smart color files in ~/.cache/dots/smart-colors/.
##     -v, --verbose                         Show detailed analysis.

source ~/.local/lib/dots/easy-options/easyoptions.sh || exit 1

# Output colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# File paths
readonly CACHE_DIR="${HOME}/.cache/dots"
readonly SMART_COLORS_DIR="${CACHE_DIR}/smart-colors"
readonly I3_COLORS_FILE="${SMART_COLORS_DIR}/colors-i3.conf"
readonly EWW_COLORS_FILE="${SMART_COLORS_DIR}/colors-eww.scss"
readonly SHELL_COLORS_FILE="${SMART_COLORS_DIR}/colors.sh"
readonly ENV_COLORS_FILE="${SMART_COLORS_DIR}/colors.env"
readonly POLYBAR_COLORS_FILE="${SMART_COLORS_DIR}/colors-polybar.conf"

# Status functions
show_status() { echo -e "${CYAN}🎨${NC} $1"; }
show_success() { echo -e "${GREEN}✅${NC} $1"; }
show_error() { echo -e "${RED}❌${NC} $1"; }
show_info() { echo -e "${BLUE}ℹ️${NC} $1"; }

# Convert hex to RGB values
hex_to_rgb() {
    local hex="${1#\#}"
    echo $((16#${hex:0:2})) $((16#${hex:2:2})) $((16#${hex:4:2}))
}

# Calculate luminance of a color (0-255 scale)
calculate_luminance() {
    local color="$1"
    local hex="${color#\#}"
    local r=$((16#${hex:0:2}))
    local g=$((16#${hex:2:2}))
    local b=$((16#${hex:4:2}))

    # Calculate relative luminance using standard formula
    # Using simplified integer math for performance
    echo $(((r * 299 + g * 587 + b * 114) / 1000))
}

# Detect if current theme is light or dark based on background
is_light_theme() {
    local bg_color; bg_color=$(xrdb -get "background" 2>/dev/null || echo "#000000")
    local luminance; luminance=$(calculate_luminance "$bg_color")

    # Threshold: >128 is considered light theme (out of 255)
    [[ $luminance -gt 128 ]]
}

# Get optimal foreground color for current theme
get_optimal_foreground() {
    local original_fg; original_fg=$(xrdb -get "foreground" 2>/dev/null || echo "#ffffff")

    if is_light_theme; then
        # In light themes, use a softer foreground instead of pure black
        local color5; color5=$(xrdb -get "color5" 2>/dev/null || echo "#52758A")
        local color7; color7=$(xrdb -get "color7" 2>/dev/null || echo "#0f1415")

        # Prefer color5 if available, fallback to color7, then original foreground
        if [[ -n "$color5" && "$color5" != "#000000" ]]; then
            echo "$color5"
        elif [[ -n "$color7" && "$color7" != "#000000" ]]; then
            echo "$color7"
        else
            echo "$original_fg"
        fi
    else
        # In dark themes, use original foreground
        echo "$original_fg"
    fi
}

# Convert hex to ANSI background color for terminal display
hex_to_ansi_bg() {
    local rgb; rgb=$(hex_to_rgb "$1")
    echo "\033[48;2;${rgb// /;}m"
}

# Show color block in terminal
show_color_block() {
    local hex="$1" label="$2" width="${3:-8}"
    local ansi_bg; ansi_bg=$(hex_to_ansi_bg "$hex")
    local spaces; printf -v spaces "%*s" "$width" ""
    printf "${ansi_bg}${spaces}${NC} %-10s %s\n" "$label" "$hex"
}

# Detect palette's dominant color tendency
get_palette_dominant_color() {
    local brightest_color="" brightest_value=0

    # Check bright colors (9-14) for dominant hue
    for i in {9..14}; do
        local color; color=$(xrdb -get "color$i" 2>/dev/null) || continue
        local hex="${color#\#}"
        local r=$((16#${hex:0:2})) g=$((16#${hex:2:2})) b=$((16#${hex:4:2}))
        local brightness=$((r + g + b))

        if [[ $brightness -gt $brightest_value ]]; then
            brightest_value=$brightness
            brightest_color="$color"
        fi
    done

    # Classify hue based on RGB dominance
    if [[ -n "$brightest_color" ]]; then
        local hex="${brightest_color#\#}"
        local r=$((16#${hex:0:2})) g=$((16#${hex:2:2})) b=$((16#${hex:4:2}))

        if [[ $r -gt $g && $r -gt $b ]]; then
            [[ $g -gt 100 ]] && echo "orange" || [[ $b -gt 100 ]] && echo "purple" || echo "red"
        elif [[ $g -gt $r && $g -gt $b ]]; then
            [[ $r -gt 100 ]] && echo "yellow" || [[ $b -gt 100 ]] && echo "cyan" || echo "green"
        elif [[ $b -gt $r && $b -gt $g ]]; then
            [[ $r -gt 100 ]] && echo "purple" || [[ $g -gt 100 ]] && echo "cyan" || echo "blue"
        else
            echo "gray"
        fi
    else
        echo "unknown"
    fi
}

# Get palette average color for harmonization
get_palette_average() {
    local total_r=0 total_g=0 total_b=0 color_count=0

    for i in {1..14}; do
        local color; color=$(xrdb -get "color$i" 2>/dev/null) || continue
        local hex="${color#\#}"
        local r=$((16#${hex:0:2})) g=$((16#${hex:2:2})) b=$((16#${hex:4:2}))

        total_r=$((total_r + r))
        total_g=$((total_g + g))
        total_b=$((total_b + b))
        ((color_count++))
    done

    if [[ $color_count -gt 0 ]]; then
        local avg_r=$((total_r / color_count))
        local avg_g=$((total_g / color_count))
        local avg_b=$((total_b / color_count))
        printf "#%02x%02x%02x" "$avg_r" "$avg_g" "$avg_b"
    else
        echo "#808080"
    fi
}

# Blend two colors with specified percentage
blend_colors() {
    local color1="$1" color2="$2" blend_percent="$3"

    local hex1="${color1#\#}" hex2="${color2#\#}"
    local r1=$((16#${hex1:0:2})) g1=$((16#${hex1:2:2})) b1=$((16#${hex1:4:2}))
    local r2=$((16#${hex2:0:2})) g2=$((16#${hex2:2:2})) b2=$((16#${hex2:4:2}))

    local inv_percent=$((100 - blend_percent))
    local result_r=$(((r1 * inv_percent + r2 * blend_percent) / 100))
    local result_g=$(((g1 * inv_percent + g2 * blend_percent) / 100))
    local result_b=$(((b1 * inv_percent + b2 * blend_percent) / 100))

    # Clamp to 0-255
    [[ $result_r -gt 255 ]] && result_r=255 || [[ $result_r -lt 0 ]] && result_r=0
    [[ $result_g -gt 255 ]] && result_g=255 || [[ $result_g -lt 0 ]] && result_g=0
    [[ $result_b -gt 255 ]] && result_b=255 || [[ $result_b -lt 0 ]] && result_b=0

    printf "#%02x%02x%02x" "$result_r" "$result_g" "$result_b"
}

# CORE FUNCTION: Semantic color lookup table with palette adaptation and theme awareness
get_smart_color() {
    local concept="$1" palette_dominant="$2"

    # Handle neutrals separately (don't need palette adaptation)
    case "$concept" in
        white) xrdb -get "foreground" 2>/dev/null || echo "#ffffff"; return ;;
        black) xrdb -get "background" 2>/dev/null || echo "#000000"; return ;;
        gray|grey) xrdb -get "color8" 2>/dev/null || echo "#808080"; return ;;
    esac

    # Detect if current theme is light or dark for adaptive color selection
    local theme_type
    if is_light_theme; then
        theme_type="light"
    else
        theme_type="dark"
    fi

    # Enhanced lookup table: concept|theme|palette_tendency -> semantically correct color
    case "$concept|$theme_type|$palette_dominant" in
        # ERROR (always reddish) - Theme adaptive
        "error|dark|red") echo "#ff5555" ;;
        "error|dark|orange") echo "#ff4444" ;;
        "error|dark|purple") echo "#ff5588" ;;
        "error|dark|"*) echo "#dd4444" ;;

        "error|light|red") echo "#cc0000" ;;
        "error|light|orange") echo "#bb2200" ;;
        "error|light|purple") echo "#cc2244" ;;
        "error|light|"*) echo "#aa2222" ;;

        # WARNING (always orange/yellow) - Theme adaptive
        "warning|dark|orange") echo "#ffaa00" ;;
        "warning|dark|yellow") echo "#ffdd00" ;;
        "warning|dark|red") echo "#ff7700" ;;
        "warning|dark|"*) echo "#dd9900" ;;

        "warning|light|orange") echo "#cc6600" ;;
        "warning|light|yellow") echo "#bb8800" ;;
        "warning|light|red") echo "#cc5500" ;;
        "warning|light|"*) echo "#996600" ;;

        # SUCCESS (always greenish) - Theme adaptive
        "success|dark|green") echo "#55dd55" ;;
        "success|dark|cyan") echo "#00dd77" ;;
        "success|dark|blue") echo "#00aacc" ;;
        "success|dark|"*) echo "#77bb55" ;;

        "success|light|green") echo "#008800" ;;
        "success|light|cyan") echo "#006644" ;;
        "success|light|blue") echo "#005577" ;;
        "success|light|"*) echo "#447733" ;;

        # INFO (bluish/cyan) - Theme adaptive for better contrast
        "info|dark|blue") echo "#55aaff" ;;
        "info|dark|cyan") echo "#00dddd" ;;
        "info|dark|purple") echo "#7777dd" ;;
        "info|dark|"*) echo "#5599dd" ;;

        "info|light|blue") echo "#0066cc" ;;
        "info|light|cyan") echo "#006699" ;;
        "info|light|purple") echo "#444499" ;;
        "info|light|"*) echo "#336699" ;;

        # ACCENT (distinctive highlight) - Theme adaptive
        "accent|dark|purple") echo "#bb77ff" ;;
        "accent|dark|pink") echo "#ff77bb" ;;
        "accent|dark|orange") echo "#ff9944" ;;
        "accent|dark|"*) echo "#9977bb" ;;

        "accent|light|purple") echo "#663399" ;;
        "accent|light|pink") echo "#cc4477" ;;
        "accent|light|orange") echo "#cc5522" ;;
        "accent|light|"*) echo "#554477" ;;

        # BASIC COLORS (maintain identity) - Theme adaptive
        "red|dark|red") echo "#ff4444" ;;
        "red|dark|orange") echo "#ff3300" ;;
        "red|dark|"*) echo "#cc3333" ;;

        "red|light|red") echo "#cc0000" ;;
        "red|light|orange") echo "#bb1100" ;;
        "red|light|"*) echo "#881111" ;;

        "green|dark|green") echo "#44cc44" ;;
        "green|dark|cyan") echo "#00cc66" ;;
        "green|dark|"*) echo "#669944" ;;

        "green|light|green") echo "#008800" ;;
        "green|light|cyan") echo "#006644" ;;
        "green|light|"*) echo "#446622" ;;

        "blue|dark|blue") echo "#4488ff" ;;
        "blue|dark|cyan") echo "#0099dd" ;;
        "blue|dark|"*) echo "#4488cc" ;;

        "blue|light|blue") echo "#0066cc" ;;
        "blue|light|cyan") echo "#005588" ;;
        "blue|light|"*) echo "#224499" ;;

        "yellow|dark|yellow") echo "#ffee00" ;;
        "yellow|dark|orange") echo "#ffdd00" ;;
        "yellow|dark|"*) echo "#cccc44" ;;

        "yellow|light|yellow") echo "#cc9900" ;;
        "yellow|light|orange") echo "#bb8800" ;;
        "yellow|light|"*) echo "#887744" ;;

        "cyan|dark|cyan") echo "#00ffff" ;;
        "cyan|dark|blue") echo "#00aadd" ;;
        "cyan|dark|"*) echo "#55aacc" ;;

        "cyan|light|cyan") echo "#008899" ;;
        "cyan|light|blue") echo "#006677" ;;
        "cyan|light|"*) echo "#335566" ;;

        "magenta|dark|purple"|"purple|dark|purple") echo "#ee55ee" ;;
        "magenta|dark|pink"|"purple|dark|pink") echo "#ff77dd" ;;
        "magenta|dark|"*|"purple|dark|"*) echo "#cc66bb" ;;

        "magenta|light|purple"|"purple|light|purple") echo "#883388" ;;
        "magenta|light|pink"|"purple|light|pink") echo "#aa3377" ;;
        "magenta|light|"*|"purple|light|"*) echo "#663355" ;;

        "orange|dark|orange") echo "#ff8800" ;;
        "orange|dark|red") echo "#ff6600" ;;
        "orange|dark|"*) echo "#cc8800" ;;

        "orange|light|orange") echo "#cc5500" ;;
        "orange|light|red") echo "#bb4400" ;;
        "orange|light|"*) echo "#885522" ;;

        "pink|dark|pink") echo "#ff99dd" ;;
        "pink|dark|purple") echo "#ff77cc" ;;
        "pink|dark|"*) echo "#dd99cc" ;;

        "pink|light|pink") echo "#cc5588" ;;
        "pink|light|purple") echo "#bb4477" ;;
        "pink|light|"*) echo "#884466" ;;

        "brown|dark|red") echo "#bb5533" ;;
        "brown|dark|orange") echo "#dd7744" ;;
        "brown|dark|"*) echo "#aa7744" ;;

        "brown|light|red") echo "#773311" ;;
        "brown|light|orange") echo "#884422" ;;
        "brown|light|"*) echo "#664422" ;;

        # FALLBACKS - Theme adaptive
        "dark|"*) echo "#999999" ;;
        "light|"*) echo "#666666" ;;
        *) echo "#888888" ;;
    esac
}

# Main function: Find best color for concept
find_best_color_for_concept() {
    local concept="$1"

    # Validate concept
    case "$concept" in
        error|warning|success|info|accent|red|green|blue|yellow|cyan|magenta|purple|orange|pink|brown|white|black|gray|grey|background|background-alt|foreground|foreground-alt) ;;
        *)
            show_error "Unknown concept: $concept"
            return 1
            ;;
    esac

            # Handle neutrals and background/foreground variants directly
    case "$concept" in
        white|black|gray|grey)
            get_smart_color "$concept"
            return 0
            ;;
        background)
            xrdb -get "background" 2>/dev/null || echo "#000000"
            return 0
            ;;
        background-alt)
            xrdb -get "color1" 2>/dev/null || echo "#1a1a1a"
            return 0
            ;;
        foreground)
            get_optimal_foreground
            return 0
            ;;
        foreground-alt)
            xrdb -get "color5" 2>/dev/null || echo "#888888"
            return 0
            ;;
    esac

    # Get palette characteristics
    local dominant_color; dominant_color=$(get_palette_dominant_color)
    local palette_average; palette_average=$(get_palette_average)

    # Get base semantic color
    local base_color; base_color=$(get_smart_color "$concept" "$dominant_color")

    # Harmonize with palette (subtle 15% blend)
    local final_color; final_color=$(blend_colors "$base_color" "$palette_average" 15)

    # Format output
    case "${format:-hex}" in
        hex) echo "$final_color" ;;
        rgb) hex_to_rgb "$final_color" ;;
        *) echo "$final_color" ;;
    esac
}

# Show visual palette
show_palette_visual() {
    echo -e "${BOLD}Current Palette:${NC}"

    # Base16 colors
    for i in {0..15}; do
        local color; color=$(xrdb -get "color$i" 2>/dev/null) || continue
        show_color_block "$color" "color$i"
    done

    echo
    echo -e "${BOLD}Smart Background & Foreground:${NC}"
    local bg_fg_colors=(background background-alt foreground foreground-alt)
    for concept in "${bg_fg_colors[@]}"; do
        local color; color=$(find_best_color_for_concept "$concept")
        show_color_block "$color" "$concept"
    done

    echo
    echo -e "${BOLD}Smart Semantic Colors:${NC}"
    local concepts=(error warning success info accent)
    for concept in "${concepts[@]}"; do
        local color; color=$(find_best_color_for_concept "$concept")
        show_color_block "$color" "$concept"
    done

    echo
    echo -e "${BOLD}Smart Basic Colors:${NC}"
    local basic_colors=(red green blue yellow cyan magenta orange pink)
    for color in "${basic_colors[@]}"; do
        local color_value; color_value=$(find_best_color_for_concept "$color")
        show_color_block "$color_value" "$color"
    done

    echo
}

# Generate file outputs
generate_smart_color_files() {
    show_status "Generating smart color files..."
    mkdir -p "$SMART_COLORS_DIR"

    # Generate smart colors
    local error_color; error_color=$(format="hex" find_best_color_for_concept "error")
    local warning_color; warning_color=$(format="hex" find_best_color_for_concept "warning")
    local success_color; success_color=$(format="hex" find_best_color_for_concept "success")
    local info_color; info_color=$(format="hex" find_best_color_for_concept "info")
    local accent_color; accent_color=$(format="hex" find_best_color_for_concept "accent")

    # Get palette colors
    local bg; bg=$(xrdb -get "background" 2>/dev/null || echo "#000000")
    local fg; fg=$(get_optimal_foreground)
    local cursor
    cursor=$(xrdb -get "cursor" 2>/dev/null)
    if [[ -z "$cursor" ]]; then
        cursor="$fg"
    fi

    # Get background and foreground variants
    local bg_alt; bg_alt=$(xrdb -get "color1" 2>/dev/null || echo "#1a1a1a")
    local fg_alt; fg_alt=$(xrdb -get "color5" 2>/dev/null || echo "#888888")

    local base_colors=()
    for i in {0..15}; do
        base_colors[i]=$(xrdb -get "color$i" 2>/dev/null || echo "#000000")
    done

    # Get wallpaper path
    local wallpaper_path=""
    if [[ -f ~/.cache/wal/wal ]]; then
        wallpaper_path=$(cat ~/.cache/wal/wal)
    elif [[ -f ~/.config/wpg/wp_init.py ]]; then
        wallpaper_path=$(python3 -c "import os; exec(open(os.path.expanduser('~/.config/wpg/wp_init.py')).read()); print(wallpaper)" 2>/dev/null || echo "")
    fi
    [[ -z "$wallpaper_path" ]] && wallpaper_path="/home/$(whoami)/.wallpaper"

    # Generate i3 colors file
    cat > "$I3_COLORS_FILE" << EOF
# Color palette generated by dots-smart-colors
# Based on current X resources and smart color analysis
# Auto-generated - do not edit manually
#
# NOTE: Values are direct color codes (not variables) because i3 cannot
# expand variables defined in included files

# Enhanced i3 color scheme using Base16 + Smart Colors
# Property Name         Border          BG              Text        Indicator       Child Border
client.focused          $accent_color  $accent_color  ${base_colors[0]}  $info_color    $accent_color
client.focused_inactive ${base_colors[1]} ${base_colors[1]} ${base_colors[5]} ${base_colors[1]} ${base_colors[1]}
client.unfocused        ${base_colors[1]} $bg ${base_colors[5]} ${base_colors[1]} ${base_colors[1]}
client.urgent           $error_color   $error_color   ${base_colors[0]} $error_color   $error_color
client.placeholder      $bg            $bg            ${base_colors[5]} $bg            $bg
client.background       ${base_colors[7]}

# Smart color reference (for documentation)
# error=$error_color
# warning=$warning_color
# success=$success_color
# info=$info_color
# accent=$accent_color
EOF

    # Generate EWW colors file
    cat > "$EWW_COLORS_FILE" << EOF
// SCSS Variables
// Generated by 'dots-smart-colors'
\$wallpaper: "$wallpaper_path";

// Special
\$background: $bg;
\$foreground: $fg;
\$cursor: $cursor;

// Colors
EOF

    for i in {0..15}; do
        echo "\$color$i: ${base_colors[i]};" >> "$EWW_COLORS_FILE"
    done

    cat >> "$EWW_COLORS_FILE" << EOF

// Background and foreground variants
\$background-alt: $bg_alt;
\$foreground-alt: $fg_alt;

// Smart semantic colors (theme-adaptive)
\$error: $error_color;
\$warning: $warning_color;
\$success: $success_color;
\$info: $info_color;
\$accent: $accent_color;

// Smart basic colors (theme-adaptive)
EOF

    local basic_colors=(red green blue yellow cyan magenta orange pink)
    for color in "${basic_colors[@]}"; do
        local color_value; color_value=$(format="hex" find_best_color_for_concept "$color")
        echo "\$$color: $color_value;" >> "$EWW_COLORS_FILE"
    done

    # Generate shell colors file
    cat > "$SHELL_COLORS_FILE" << EOF
# Shell variables
# Generated by 'dots-smart-colors'

# Background and foreground variants
color_background='$bg'
color_background_alt='$bg_alt'
color_foreground='$fg'
color_foreground_alt='$fg_alt'

# Smart semantic colors
color_error='$error_color'
color_warning='$warning_color'
color_success='$success_color'
color_info='$info_color'
color_accent='$accent_color'

# Smart basic colors
EOF

    for color in "${basic_colors[@]}"; do
        local color_value; color_value=$(format="hex" find_best_color_for_concept "$color")
        echo "color_${color}='$color_value'" >> "$SHELL_COLORS_FILE"
    done

    # Generate environment colors file
    cat > "$ENV_COLORS_FILE" << EOF
# Environment variables for smart colors
# Generated by 'dots-smart-colors'
# Source this file: source $ENV_COLORS_FILE

# Background and foreground variants
export COLOR_BACKGROUND='$bg'
export COLOR_BACKGROUND_ALT='$bg_alt'
export COLOR_FOREGROUND='$fg'
export COLOR_FOREGROUND_ALT='$fg_alt'

# Smart semantic colors
export COLOR_ERROR='$error_color'
export COLOR_WARNING='$warning_color'
export COLOR_SUCCESS='$success_color'
export COLOR_INFO='$info_color'
export COLOR_ACCENT='$accent_color'

# Smart basic colors
EOF

    local extended_colors=(red green blue yellow cyan magenta orange pink brown white black gray)
    for color in "${extended_colors[@]}"; do
        local color_value; color_value=$(format="hex" find_best_color_for_concept "$color")
        echo "export COLOR_${color^^}='$color_value'" >> "$ENV_COLORS_FILE"
    done

    # Generate polybar colors file
    # Get all smart basic colors
    local red_color; red_color=$(format="hex" find_best_color_for_concept "red")
    local green_color; green_color=$(format="hex" find_best_color_for_concept "green")
    local blue_color; blue_color=$(format="hex" find_best_color_for_concept "blue")
    local yellow_color; yellow_color=$(format="hex" find_best_color_for_concept "yellow")
    local cyan_color; cyan_color=$(format="hex" find_best_color_for_concept "cyan")
    local magenta_color; magenta_color=$(format="hex" find_best_color_for_concept "magenta")
    local orange_color; orange_color=$(format="hex" find_best_color_for_concept "orange")
    local pink_color; pink_color=$(format="hex" find_best_color_for_concept "pink")
    local white_color; white_color=$(format="hex" find_best_color_for_concept "white")
    local black_color; black_color=$(format="hex" find_best_color_for_concept "black")
    local gray_color; gray_color=$(format="hex" find_best_color_for_concept "gray")

    cat > "$POLYBAR_COLORS_FILE" << EOF
; Polybar colors configuration
; Generated by 'dots-smart-colors'
; This file contains standard polybar color definitions using smart theme-adaptive colors

[colors]
; Base colors from X resources
background = $bg
background-alt = ${base_colors[1]}
foreground = $fg
foreground-alt = ${base_colors[5]}
primary = ${base_colors[1]}
secondary = ${base_colors[2]}

; Status colors using smart semantic colors
alert = $error_color
moderate = $warning_color
urgent = $error_color

; Theme colors using smart basic colors
trim = $info_color
blue = $blue_color
green = $green_color
pink = $pink_color
orange = $orange_color
purple = $magenta_color
yellow = $yellow_color
border = ${base_colors[8]}

; Basic color mappings using smart colors
red = $red_color
cyan = $cyan_color
magenta = $magenta_color
white = $white_color
black = $black_color
gray = $gray_color

; Semantic colors using smart colors
success = $success_color
warning = $warning_color
error = $error_color
info = $info_color
disabled = $gray_color
accent = $accent_color

; Base16 color references (for compatibility)
EOF

    for i in {0..15}; do
        echo "color$i = ${base_colors[i]}" >> "$POLYBAR_COLORS_FILE"
    done

    show_success "Smart color files generated in $SMART_COLORS_DIR"
}

# Main script logic
main() {
    # Check dependencies
    command -v xrdb >/dev/null 2>&1 || { show_error "xrdb not found"; exit 1; }

    # Handle options
    if [[ -n "$analyze" ]]; then
        show_palette_visual
    elif [[ -n "$colors" ]]; then
        show_palette_visual
    elif [[ -n "$export" ]]; then
        case "${format:-shell}" in
            files) generate_smart_color_files ;;
            *)
                local concepts=(error warning success info accent red green blue yellow cyan magenta orange pink brown white black gray)
                echo "# Smart color variables generated by dots-smart-colors"
                echo "# Source this file or copy to your shell/polybar config"
                echo

                echo "# Background and foreground variants"
                for concept in background background-alt foreground foreground-alt; do
                    local color; color=$(find_best_color_for_concept "$concept")
                    echo "export COLOR_${concept^^//-/_}='$color'"
                done

                echo
                echo "# Semantic colors"
                for concept in error warning success info accent; do
                    local color; color=$(find_best_color_for_concept "$concept")
                    echo "export COLOR_${concept^^}='$color'"
                done

                echo
                echo "# Basic colors"
                for concept in red green blue yellow cyan magenta orange pink brown white black gray; do
                    local color; color=$(find_best_color_for_concept "$concept")
                    echo "export COLOR_${concept^^}='$color'"
                done

                echo
                echo "# Polybar format variables (background/foreground)"
                for concept in background background-alt foreground foreground-alt; do
                    local color; color=$(format="polybar" find_best_color_for_concept "$concept")
                    echo "# $concept = $color"
                done

                echo
                echo "# Polybar format variables (semantic)"
                for concept in error warning success info accent; do
                    local color; color=$(format="polybar" find_best_color_for_concept "$concept")
                    echo "# $concept = $color"
                done

                echo
                echo "# Polybar format variables (basic colors)"
                for concept in red green blue yellow cyan magenta orange pink; do
                    local color; color=$(format="polybar" find_best_color_for_concept "$concept")
                    echo "# $concept = $color"
                done
                ;;
        esac
    elif [[ -n "$concept" ]]; then
        find_best_color_for_concept "$concept"
    elif [[ -n "$generate" ]]; then
        generate_smart_color_files
    else
        # Default: show quick palette
        echo -e "${BOLD}Smart Colors Preview:${NC}"

        # Show background/foreground first
        local bg_fg_colors=(background foreground background-alt foreground-alt)
        for concept in "${bg_fg_colors[@]}"; do
            local color; color=$(find_best_color_for_concept "$concept")
            show_color_block "$color" "$concept"
        done

        echo
        echo -e "${BOLD}Semantic Colors:${NC}"
        local concepts=(error warning success info accent)
        for concept in "${concepts[@]}"; do
            local color; color=$(find_best_color_for_concept "$concept")
            show_color_block "$color" "$concept"
        done
        echo
        show_info "Use --help for more options"
    fi
}

# Run main function
main "$@"
