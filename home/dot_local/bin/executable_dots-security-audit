#!/usr/bin/env bash

## Copyright (C) 2019-2025 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## Check full documentation at: https://github.com/ulises-jeremias/dotfiles/wiki
##
##     @script.name [OPTION] ARGUMENTS...
##
## Options:
##     -h, --help                            Show this help message.
##     -a, --audit                           Run security audit.
##     -f, --fix                             Apply security fixes.
##     -r, --report                          Generate security report.
##         --permissions                     Check file permissions.
##         --secrets                         Scan for exposed secrets.
##

source ~/.local/lib/dots/easy-options/easyoptions.sh || exit

date_str="$(date +%Y-%m-%d)"

SECURITY_LOG="$HOME/.cache/dots/security_audit_${date_str}.log"
[[ ! -d "$(dirname "$SECURITY_LOG")" ]] && mkdir -p "$(dirname "$SECURITY_LOG")"

check_file_permissions() {
    echo "üîí Checking file permissions across system..."

    local issues=0

    # Check SSH directory permissions
    if [[ -d "$HOME/.ssh" ]]; then
        local ssh_perms
        ssh_perms=$(stat -c %a "$HOME/.ssh")
        if [[ "$ssh_perms" != "700" ]]; then
            echo "‚ùå SSH directory has incorrect permissions: $ssh_perms (should be 700)"
            ((issues++))
        else
            echo "‚úÖ SSH directory permissions correct"
        fi

        # Check SSH key permissions
        find "$HOME/.ssh" -type f \( -name "id_*" -o -name "*_rsa" -o -name "*_ed25519" -o -name "*_ecdsa" \) ! -name "*.pub" | while read -r key; do
            local key_perms
            key_perms=$(stat -c %a "$key")
            if [[ "$key_perms" != "600" ]]; then
                echo "‚ùå SSH private key has incorrect permissions: $(basename "$key") ($key_perms, should be 600)"
                ((issues++))
            fi
        done

        # Check SSH config permissions
        if [[ -f "$HOME/.ssh/config" ]]; then
            local config_perms
            config_perms=$(stat -c %a "$HOME/.ssh/config")
            if [[ "$config_perms" != "600" ]]; then
                echo "‚ùå SSH config has incorrect permissions: $config_perms (should be 600)"
                ((issues++))
            fi
        fi
    fi

    # Check credential files
    local cred_dir="$HOME/.config/private_credentials"
    if [[ -d "$cred_dir" ]]; then
        find "$cred_dir" -type f -exec stat -c "%a %n" {} \; | while read -r perms file; do
            if [[ "$perms" != "600" ]]; then
                echo "‚ùå Credential file has incorrect permissions: $(basename "$file") ($perms, should be 600)"
                ((issues++))
            fi
        done
    fi

    # Check for world-readable sensitive files in home directory
    echo "  Checking for world-readable sensitive files..."
    find "$HOME" -maxdepth 3 -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name "*password*" -o -name "*secret*" \) -perm /o+r 2>/dev/null | while read -r file; do
        echo "‚ùå Sensitive file is world-readable: $file"
        ((issues++))
    done

    # Check dotfiles scripts are not world-writable
    find "$HOME/.local/bin" -name "executable_dots-*" -perm /o+w 2>/dev/null | while read -r script; do
        echo "‚ùå Script is world-writable: $(basename "$script")"
        ((issues++))
    done

    # Check home directory permissions
    local home_perms
    home_perms=$(stat -c %a "$HOME")
    if [[ "${home_perms: -1}" -gt "5" ]]; then
        echo "‚ùå Home directory is world-writable: $home_perms"
        ((issues++))
    fi

    # Check for files with SUID/SGID bits in user directories
    echo "  Checking for suspicious SUID/SGID files..."
    find "$HOME/.local" "$HOME/.config" -type f \( -perm -4000 -o -perm -2000 \) 2>/dev/null | while read -r file; do
        echo "‚ö†Ô∏è  Found SUID/SGID file in user directory: $file"
    done

    return $issues
}

scan_for_secrets() {
    echo "üîç Scanning for exposed secrets in applied configurations..."

    local issues=0

    # Common secret patterns
    local patterns=(
        "password.*=.*['\"][^'\"]{8,}['\"]"
        "token.*=.*['\"][^'\"]{16,}['\"]"
        "api[_-]?key.*=.*['\"][^'\"]{16,}['\"]"
        "secret.*=.*['\"][^'\"]{16,}['\"]"
        "private[_-]?key.*=.*['\"][^'\"]{32,}['\"]"
        "aws_access_key_id.*=.*[A-Z0-9]{20}"
        "aws_secret_access_key.*=.*[A-Za-z0-9/+=]{40}"
    )

    # Locations to scan for secrets (actual applied configs)
    local scan_locations=(
        "$HOME/.config"
        "$HOME/.local/share"
        "$HOME/.zshrc"
        "$HOME/.bashrc"
        "$HOME/.profile"
        "$HOME/.zprofile"
        "$HOME/.gitconfig"
        "$HOME/.npmrc"
        "$HOME/.env"
        "$HOME/.envrc"
    )

    echo "  Scanning applied configurations for secrets..."

    for location in "${scan_locations[@]}"; do
        if [[ -e "$location" ]]; then
            for pattern in "${patterns[@]}"; do
                local matches
                if [[ -d "$location" ]]; then
                    matches=$(find "$location" -type f -name "*.conf" -o -name "*.config" -o -name "*.sh" -o -name "*.zsh" -o -name "*.bash" 2>/dev/null |
                    xargs grep -lEi "$pattern" 2>/dev/null || true)
                else
                    matches=$(grep -lEi "$pattern" "$location" 2>/dev/null || true)
                fi

                if [[ -n "$matches" ]]; then
                    echo "‚ùå Potential secret found in: $matches"
                    echo "   Pattern: $pattern"
                    ((issues++))
                fi
            done
        fi
    done

    # Check for hardcoded IPs in actual configs
    echo "  Checking for hardcoded internal IPs..."
    for location in "${scan_locations[@]}"; do
        if [[ -e "$location" ]]; then
            local ip_matches
            if [[ -d "$location" ]]; then
                ip_matches=$(find "$location" -type f 2>/dev/null |
                xargs grep -lE "\b(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.|127\.0\.0\.1)\b" 2>/dev/null || true)
            else
                ip_matches=$(grep -lE "\b(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.|127\.0\.0\.1)\b" "$location" 2>/dev/null || true)
            fi

            if [[ -n "$ip_matches" ]]; then
                echo "‚ö†Ô∏è  Found internal IP addresses in: $ip_matches"
            fi
        fi
    done

    # Check environment variables for secrets
    echo "  Checking environment variables..."
    if env | grep -Ei "(password|token|secret|key)" | grep -v "XDG\|DESKTOP\|SESSION"; then
        echo "‚ö†Ô∏è  Found potential secrets in environment variables"
    fi

    # Check shell history for accidentally entered secrets
    echo "  Checking shell history for potential secrets..."
    local history_files=("$HOME/.zsh_history" "$HOME/.bash_history" "$HOME/.history")
    for hist_file in "${history_files[@]}"; do
        if [[ -f "$hist_file" ]]; then
            if grep -Ei "(password|token|secret|key).*=" "$hist_file" | head -5; then
                echo "‚ö†Ô∏è  Found potential secrets in shell history: $hist_file"
            fi
        fi
    done

    if [[ $issues -eq 0 ]]; then
        echo "‚úÖ No obvious secrets found in applied configurations"
    fi

    return $issues
}

check_system_security() {
    echo "üõ°Ô∏è  Checking system security settings..."

    # Check if firewall is active
    if command -v ufw >/dev/null 2>&1; then
        if ufw status | grep -q "Status: active"; then
            echo "‚úÖ UFW firewall is active"
        else
            echo "‚ö†Ô∏è  UFW firewall is not active"
        fi
        elif command -v firewall-cmd >/dev/null 2>&1; then
        if firewall-cmd --state 2>/dev/null | grep -q running; then
            echo "‚úÖ Firewalld is running"
        else
            echo "‚ö†Ô∏è  Firewalld is not running"
        fi
        elif command -v iptables >/dev/null 2>&1; then
        local rules_count
        rules_count=$(iptables -L | wc -l)
        if [[ $rules_count -gt 10 ]]; then
            echo "‚úÖ iptables rules configured"
        else
            echo "‚ö†Ô∏è  No firewall rules detected"
        fi
    else
        echo "‚ö†Ô∏è  No firewall management tool detected"
    fi

    # Check for automatic updates
    if [[ -f /etc/systemd/system/timers.target.wants/apt-daily.timer ]]; then
        echo "‚úÖ Automatic updates configured (apt)"
        elif systemctl is-enabled dnf-automatic.timer >/dev/null 2>&1; then
        echo "‚úÖ Automatic updates configured (dnf)"
        elif command -v pacman >/dev/null 2>&1 && systemctl is-enabled --quiet reflector.timer 2>/dev/null; then
        echo "‚úÖ Automatic mirror updates configured (arch)"
    else
        echo "‚ö†Ô∏è  Automatic updates not detected"
    fi

    # Check SSH configuration
    if [[ -f /etc/ssh/sshd_config ]]; then
        if grep -q "^PermitRootLogin no" /etc/ssh/sshd_config; then
            echo "‚úÖ SSH root login disabled"
        else
            echo "‚ö†Ô∏è  SSH root login not explicitly disabled"
        fi

        if grep -q "^PasswordAuthentication no" /etc/ssh/sshd_config; then
            echo "‚úÖ SSH password authentication disabled"
        else
            echo "‚ö†Ô∏è  SSH password authentication not disabled"
        fi

        if grep -q "^Protocol 2" /etc/ssh/sshd_config || ! grep -q "^Protocol" /etc/ssh/sshd_config; then
            echo "‚úÖ SSH using secure protocol"
        else
            echo "‚ùå SSH not using protocol 2"
        fi
    fi

    # Check for running security tools
    if systemctl is-active --quiet fail2ban 2>/dev/null; then
        echo "‚úÖ fail2ban is running"
    else
        echo "‚ö†Ô∏è  fail2ban not running"
    fi

    if command -v apparmor_status >/dev/null 2>&1; then
        if apparmor_status >/dev/null 2>&1; then
            echo "‚úÖ AppArmor is active"
        else
            echo "‚ö†Ô∏è  AppArmor not active"
        fi
        elif command -v sestatus >/dev/null 2>&1; then
        if sestatus | grep -q "enabled"; then
            echo "‚úÖ SELinux is enabled"
        else
            echo "‚ö†Ô∏è  SELinux not enabled"
        fi
    else
        echo "‚ö†Ô∏è  No MAC (Mandatory Access Control) system detected"
    fi

    # Check for suspicious network connections
    echo "  Checking for suspicious network connections..."
    if command -v netstat >/dev/null 2>&1; then
        local suspicious_ports
        suspicious_ports=$(netstat -tulnp 2>/dev/null | grep -E ":22[0-9][0-9]|:31[0-9][0-9]|:44[0-9][0-9]" | wc -l)
        if [[ $suspicious_ports -gt 0 ]]; then
            echo "‚ö†Ô∏è  Found $suspicious_ports potentially suspicious listening ports"
        fi
    fi

    # Check system integrity
    if command -v debsums >/dev/null 2>&1; then
        echo "  System package integrity check available (debsums)"
        elif command -v rpm >/dev/null 2>&1; then
        echo "  System package integrity check available (rpm -V)"
    fi

    # Check for unattended upgrades
    if [[ -f /etc/apt/apt.conf.d/20auto-upgrades ]]; then
        if grep -q "APT::Periodic::Unattended-Upgrade \"1\"" /etc/apt/apt.conf.d/20auto-upgrades; then
            echo "‚úÖ Unattended security upgrades enabled"
        fi
    fi
}

run_security_audit() {
    echo "üîê Running comprehensive security audit..."
    echo "Timestamp: $(date)" >"$SECURITY_LOG"

    {
        echo ""
        check_file_permissions
        echo ""
        scan_for_secrets
        echo ""
        check_system_security
    } | tee -a "$SECURITY_LOG"

    echo ""
    echo "üìÑ Security audit completed. Log saved to: $SECURITY_LOG"
}

apply_security_fixes() {
    echo "üîß Applying security fixes..."

    # Fix SSH directory permissions
    if [[ -d "$HOME/.ssh" ]]; then
        chmod 700 "$HOME/.ssh"
        echo "‚úÖ Fixed SSH directory permissions"

        # Fix SSH key permissions
        find "$HOME/.ssh" -type f \( -name "id_*" -o -name "*_rsa" -o -name "*_ed25519" -o -name "*_ecdsa" \) ! -name "*.pub" -exec chmod 600 {} \;
        echo "‚úÖ Fixed SSH private key permissions"

        # Fix SSH config permissions
        if [[ -f "$HOME/.ssh/config" ]]; then
            chmod 600 "$HOME/.ssh/config"
            echo "‚úÖ Fixed SSH config permissions"
        fi

        # Fix SSH public key permissions
        find "$HOME/.ssh" -name "*.pub" -exec chmod 644 {} \;
        echo "‚úÖ Fixed SSH public key permissions"
    fi

    # Fix credential file permissions
    local cred_dir="$HOME/.config/private_credentials"
    if [[ -d "$cred_dir" ]]; then
        find "$cred_dir" -type f -exec chmod 600 {} \;
        chmod 700 "$cred_dir"
        echo "‚úÖ Fixed credential file permissions"
    fi

    # Fix script permissions
    find "$HOME/.local/bin" -name "executable_dots-*" -exec chmod 755 {} \;
    echo "‚úÖ Fixed script permissions"

    # Fix sensitive file permissions
    find "$HOME" -maxdepth 3 -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" \) -exec chmod 600 {} \; 2>/dev/null
    echo "‚úÖ Fixed sensitive file permissions"

    # Remove world permissions from home directory if needed
    local home_perms
    home_perms=$(stat -c %a "$HOME")
    if [[ "${home_perms: -1}" -gt "5" ]]; then
        chmod o-rwx "$HOME"
        echo "‚úÖ Removed world permissions from home directory"
    fi

    # Clear potentially sensitive shell history
    if [[ -f "$HOME/.zsh_history" ]]; then
        sed -i '/password\|token\|secret\|key.*=/d' "$HOME/.zsh_history" 2>/dev/null || true
        echo "‚úÖ Cleaned sensitive entries from zsh history"
    fi

    if [[ -f "$HOME/.bash_history" ]]; then
        sed -i '/password\|token\|secret\|key.*=/d' "$HOME/.bash_history" 2>/dev/null || true
        echo "‚úÖ Cleaned sensitive entries from bash history"
    fi

    echo "üîí Security fixes applied"
}

generate_security_report() {
    local report_file
    report_file="$HOME/.cache/dots/security_report_$(date +%Y%m%d).md"

    cat >"$report_file" <<EOF
# HorneroConfig Security Report

Generated: $(date)

## Summary

This report contains the security audit results for your HorneroConfig installation.

## File Permissions Audit
$(check_file_permissions 2>&1)

## Secret Scan Results
$(scan_for_secrets 2>&1)

## System Security Status
$(check_system_security 2>&1)

## Recommendations

### High Priority
- Ensure all SSH keys have 600 permissions
- Remove any hardcoded secrets from configuration files
- Enable firewall if not already active

### Medium Priority
- Set up automatic security updates
- Review SSH configuration for hardening
- Regular security audits (monthly)

### Security Checklist
- [ ] SSH keys properly secured
- [ ] No secrets in plain text
- [ ] Firewall configured
- [ ] Automatic updates enabled
- [ ] Regular backups configured

## Next Steps

Run \`dots security-audit --fix\` to automatically apply common security fixes.

For additional security, consider:
- Setting up fail2ban for SSH protection
- Configuring SELinux/AppArmor if available
- Using full disk encryption
- Regular security updates
EOF

    echo "üìã Security report generated: $report_file"
}

# Main execution logic
if [[ -n "${audit}" ]]; then
    run_security_audit
    elif [[ -n "${fix}" ]]; then
    apply_security_fixes
    elif [[ -n "${report}" ]]; then
    generate_security_report
    elif [[ -n "${permissions}" ]]; then
    check_file_permissions
    elif [[ -n "${secrets}" ]]; then
    scan_for_secrets
else
    run_security_audit
fi
