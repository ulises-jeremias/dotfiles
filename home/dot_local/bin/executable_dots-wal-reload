#!/usr/bin/env bash

## Copyright (C) 2019-2025 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## Check full documentation at: https://github.com/ulises-jeremias/dotfiles/wiki
##
## Enhanced wal-reload utility script with improved reliability and user experience
## No longer relies on external state files, minimizes dependencies

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global counters for summary
UPDATED_APPS=()
FAILED_APPS=()
SKIPPED_APPS=()

# Function to show status
show_status() {
    echo -e "${CYAN}🎨${NC} $1"
}

# Function to show success
show_success() {
    echo -e "${GREEN}✅${NC} $1"
}

# Function to show error
show_error() {
    echo -e "${RED}❌${NC} $1"
}

# Function to show warning
show_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

# Function to send notification
send_notification() {
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "$1" "$2" -t 3000 -i "$3" 2>/dev/null || true
    fi
}

# Function to check if a command exists and warn if not
check_command() {
    local cmd=$1
    local description=$2
    local required=${3:-false}

    if ! command -v "$cmd" >/dev/null 2>&1; then
        if [[ "$required" == "true" ]]; then
            show_error "$description ($cmd) is not installed and is required!"
            FAILED_APPS+=("$description")
            return 1
        else
            show_warning "$description ($cmd) is not installed, skipping related updates"
            SKIPPED_APPS+=("$description")
            return 1
        fi
    fi
    return 0
}

# Function to safely execute commands with error handling
safe_execute() {
    local description=$1
    shift

    show_status "$description..."

    if "$@" >/dev/null 2>&1; then
        show_success "$description completed"
        UPDATED_APPS+=("$description")
        return 0
    else
        show_error "$description failed"
        FAILED_APPS+=("$description")
        return 1
    fi
}

# Function to reload wal
reload_wal() {
    show_status "Reloading pywal colorscheme..."

    if ! check_command wal "pywal" true; then
        exit 1
    fi

    # Check if the ~/.cache/wal directory exists
    if [[ ! -d "${HOME}/.cache/wal" ]]; then
        show_error "The ~/.cache/wal directory does not exist. Please run wal first."
        send_notification "❌ Wal Error" "No wal cache found. Run wal first." "dialog-error"
        exit 1
    fi

    # Reset the colorscheme
    if wal -R -q 2>/dev/null; then
        show_success "Pywal colorscheme reloaded"
    else
        show_error "Failed to reload wal colorscheme"
        exit 1
    fi
}

# Function to reload i3 configuration
reload_i3() {
    if ! pgrep "i3" >/dev/null 2>&1; then
        show_warning "i3 is not running, skipping i3 reload"
        SKIPPED_APPS+=("i3")
        return 0
    fi

    show_status "Reloading i3 configuration..."

    if i3-msg reload >/dev/null 2>&1; then
        show_success "i3 configuration reloaded"
        UPDATED_APPS+=("i3")

        # Apply gaps if setup script exists
        if [[ -x ~/.config/i3/setup-gaps.sh ]]; then
            if safe_execute "Applying i3 gaps" ~/.config/i3/setup-gaps.sh; then
                show_success "i3 gaps applied"
            fi
        fi
    else
        show_error "Failed to reload i3 configuration"
        FAILED_APPS+=("i3")
    fi
}

# Function to reload rofi colors
reload_rofi() {
    if ! check_command rofi "Rofi"; then
        return 0
    fi

    show_status "Updating Rofi colors..."

    local rofi_colors_source="$HOME/.cache/wal/colors-rofi-dark.rasi"
    local rofi_colors_dest="$HOME/.config/rofi/colors.rasi"

    if [[ -f "$rofi_colors_source" ]]; then
        if cp "$rofi_colors_source" "$rofi_colors_dest" 2>/dev/null; then
            show_success "Rofi colors updated"
            UPDATED_APPS+=("Rofi")
        else
            show_error "Failed to copy Rofi colors"
            FAILED_APPS+=("Rofi")
        fi
    else
        show_warning "Rofi color file not found: $rofi_colors_source"
        SKIPPED_APPS+=("Rofi")
    fi
}

# Function to reload EWW
reload_eww() {
    local eww_manager="$HOME/.config/eww/eww-manager.sh"

    if [[ ! -x "$eww_manager" ]]; then
        show_warning "EWW manager not found: $eww_manager"
        SKIPPED_APPS+=("EWW")
        return 0
    fi

    show_status "Updating EWW colors and reloading widgets..."

    local wal_colors="$HOME/.cache/wal/colors.scss"

    if [[ ! -f "$wal_colors" ]]; then
        show_warning "Wal SCSS colors not found: $wal_colors"
        return 0
    fi

    # Update colors for all EWW configs
    local eww_configs=("$HOME/.config/eww/dashboard" "$HOME/.config/eww/powermenu" "$HOME/.config/eww/sidebar")
    local updated_configs=()

    for eww_config in "${eww_configs[@]}"; do
        if [[ -d "$eww_config" ]]; then
            local config_name=$(basename "$eww_config")
            rm -f "$eww_config/colors.scss"
            if ln -sf "$wal_colors" "$eww_config/colors.scss" 2>/dev/null; then
                show_success "EWW $config_name colors linked"
                updated_configs+=("$config_name")
            fi
        fi
    done

    # Use EWW manager to restart all components with new colors
    if "$eww_manager" restart >/dev/null 2>&1; then
        show_success "EWW components restarted with new colors"
        UPDATED_APPS+=("EWW (${updated_configs[*]})")
    else
        show_warning "EWW restart failed (colors still updated)"
        FAILED_APPS+=("EWW restart")
    fi
}

# Function to reload betterlockscreen
reload_betterlockscreen() {
    if ! check_command betterlockscreen "Betterlockscreen"; then
        return 0
    fi

    # Move to background to not block the reload process
    (
        local current_wallpaper="$HOME/.config/wpg/.current"

        if [[ -f "$current_wallpaper" ]]; then
            show_status "Updating betterlockscreen with current wallpaper (background)..."
            if betterlockscreen -u "$current_wallpaper" >/dev/null 2>&1; then
                show_success "Betterlockscreen updated"
                UPDATED_APPS+=("Betterlockscreen")
            else
                show_error "Betterlockscreen update failed"
                FAILED_APPS+=("Betterlockscreen")
            fi
        else
            show_warning "Current wallpaper not found: $current_wallpaper"
            # Fallback: try to use wal wallpaper
            local wal_wallpaper
            wal_wallpaper=$(grep "wallpaper" "$HOME/.cache/wal/colors.sh" 2>/dev/null | cut -d"'" -f2)
            if [[ -f "$wal_wallpaper" ]]; then
                if betterlockscreen -u "$wal_wallpaper" >/dev/null 2>&1; then
                    show_success "Betterlockscreen updated (wal fallback)"
                    UPDATED_APPS+=("Betterlockscreen")
                else
                    FAILED_APPS+=("Betterlockscreen")
                fi
            else
                SKIPPED_APPS+=("Betterlockscreen")
            fi
        fi
    ) &

    show_status "Betterlockscreen update started in background..."
}

# Function to reload Discord theme
reload_discord() {
    if ! check_command wal-discord "wal-discord"; then
        return 0
    fi

    show_status "Updating Discord theme..."

    # Generate the style.css file and BetterDiscord theme
    if wal-discord >/dev/null 2>&1 && wal-discord -t >/dev/null 2>&1; then
        show_success "Discord theme updated"
    else
        show_error "Failed to update Discord theme"
    fi
}

# Function to apply smart colors after wal reload
reload_smart_colors() {
    if ! command -v dots-smart-colors >/dev/null 2>&1; then
        show_warning "dots-smart-colors not found, skipping smart color integration"
        return 0
    fi

    show_status "Applying smart theme-adaptive colors..."

    # Generate all smart color files in centralized location
    show_status "Generating smart color files for all applications..."
    if dots-smart-colors --generate >/dev/null 2>&1; then
        show_success "Smart color files generated successfully"
    else
        show_warning "Failed to generate smart color files, falling back to basic export"
        # Fallback to old method
        if eval "$(dots-smart-colors --export 2>/dev/null)"; then
            show_success "Smart colors exported to environment (fallback mode)"
        else
            show_warning "Failed to export smart colors to environment"
            return 0
        fi
    fi

    # Load smart colors into current environment
    if [[ -f "$HOME/.cache/dots/smart-colors/colors.env" ]]; then
        source "$HOME/.cache/dots/smart-colors/colors.env" 2>/dev/null && show_success "Smart colors loaded into environment"
    fi

    # Apply smart colors to applications
    apply_smart_colors_to_apps

    UPDATED_APPS+=("Smart Colors Integration")
}

# Apply smart colors to running applications
apply_smart_colors_to_apps() {
    local smart_colors_applied=false

    # Update polybar if running
    if pgrep polybar >/dev/null; then
        show_status "Polybar detected, restarting with smart colors..."
        if ~/.config/polybar/launch.sh restart >/dev/null 2>&1; then
            show_success "Polybar restarted with smart colors"
            UPDATED_APPS+=("Polybar with smart colors")
            smart_colors_applied=true
        else
            show_warning "Polybar restart failed"
            FAILED_APPS+=("Polybar restart")
        fi
    fi

    # Update EWW widgets if running
    if command -v eww >/dev/null 2>&1 && eww ping >/dev/null 2>&1; then
        show_status "EWW daemon detected, updating widget colors..."

        # Dashboard
        if [[ -f "$HOME/.config/eww/dashboard/smart-colors.scss" ]]; then
            ~/.config/eww/dashboard/launch.sh restart >/dev/null 2>&1 && show_success "EWW dashboard updated with smart colors"
            UPDATED_APPS+=("EWW Dashboard")
            smart_colors_applied=true
        fi

        # Powermenu
        if [[ -f "$HOME/.config/eww/powermenu/smart-colors.scss" ]]; then
            ~/.config/eww/powermenu/launch.sh restart >/dev/null 2>&1 && show_success "EWW powermenu updated with smart colors"
            UPDATED_APPS+=("EWW Powermenu")
            smart_colors_applied=true
        fi
    fi

    # Update i3 if running and config exists
    if pgrep i3 >/dev/null && [[ -f "$HOME/.config/i3/config.d/smart-colors.conf" ]]; then
        show_status "i3 detected, reloading with smart colors..."
        if i3-msg reload >/dev/null 2>&1; then
            show_success "i3 configuration reloaded with smart colors"
            UPDATED_APPS+=("i3 with smart colors")
            smart_colors_applied=true
        else
            show_warning "i3 reload failed"
            FAILED_APPS+=("i3 reload")
        fi
    fi

    if [[ "$smart_colors_applied" == "true" ]]; then
        show_success "Smart colors applied to running applications"
    else
        show_info "Smart color files generated, will be used when applications restart"
    fi
}

# Function to reload additional applications
reload_additional_apps() {
    show_status "Checking for additional applications to reload..."

    # Reload Alacritty if it's running and config exists
    if pgrep alacritty >/dev/null && [[ -f "$HOME/.cache/wal/colors-alacritty.yml" ]]; then
        show_status "Alacritty detected, colors should auto-reload"
    fi

    # Reload Kitty if it's running
    if pgrep kitty >/dev/null && command -v kitty >/dev/null 2>&1; then
        if kitty @ set-colors --all --configured ~/.cache/wal/colors-kitty.conf 2>/dev/null; then
            show_success "Kitty colors reloaded"
        fi
    fi

    # Reload VSCode theme if wal-theme-vscode is available
    if command -v wal-theme-vscode >/dev/null 2>&1; then
        safe_execute "Updating VSCode theme" wal-theme-vscode
    fi

    # Note: Polybar smart color integration is handled by the smart colors section
}

# Function to update current rice if applicable
update_current_rice() {
    local rice_config="$HOME/.cache/dots/current_rice"

    if [[ -f "$rice_config" ]]; then
        source "$rice_config"
        if [[ -n "$CURRENT_RICE" && -f "$HOME/.local/share/dots/rices/$CURRENT_RICE/apply.sh" ]]; then
            show_status "Current rice detected: $CURRENT_RICE"
            show_status "You may want to reapply the rice to fully integrate new colors"
            # Optionally: auto-reapply rice
            # "$HOME/.local/share/dots/rices/$CURRENT_RICE/apply.sh"
        fi
    fi
}

# Function to show reload summary
show_summary() {
    echo ""
    echo -e "${PURPLE}🎨 Wal Reload Summary 🎨${NC}"
    echo ""
    show_success "Pywal colorscheme has been reloaded"
    echo ""

    if [[ ${#UPDATED_APPS[@]} -gt 0 ]]; then
        echo -e "${GREEN}✅ Successfully updated (${#UPDATED_APPS[@]}):${NC}"
        printf '  • %s\n' "${UPDATED_APPS[@]}"
        echo ""
    fi

    if [[ ${#SKIPPED_APPS[@]} -gt 0 ]]; then
        echo -e "${YELLOW}⚠️  Skipped (${#SKIPPED_APPS[@]}):${NC}"
        printf '  • %s\n' "${SKIPPED_APPS[@]}"
        echo ""
    fi

    if [[ ${#FAILED_APPS[@]} -gt 0 ]]; then
        echo -e "${RED}❌ Failed (${#FAILED_APPS[@]}):${NC}"
        printf '  • %s\n' "${FAILED_APPS[@]}"
        echo ""
    fi

    local total_updated=${#UPDATED_APPS[@]}
    local total_failed=${#FAILED_APPS[@]}

    if [[ $total_failed -eq 0 ]]; then
        echo -e "${GREEN}🎉 All operations completed successfully!${NC}"
        send_notification "🎨 Wal Reload Complete" "Successfully updated $total_updated applications" "applications-graphics"
    else
        echo -e "${YELLOW}⚠️  Completed with $total_failed failures${NC}"
        send_notification "🎨 Wal Reload Completed" "Updated $total_updated apps, $total_failed failed" "dialog-warning"
    fi

    echo ""
    echo -e "${CYAN}💡 Tip:${NC} Some applications may require a restart to fully apply new colors"
}

# Main function
main() {
    echo -e "${PURPLE}🎨 Enhanced Wal Reload Script 🎨${NC}"
    echo ""

    # Core wal reload
    reload_wal

    # Reload applications (fast operations first)
    reload_i3
    reload_rofi
    reload_eww
    reload_discord
    reload_additional_apps

    # Apply smart colors after all standard wal operations
    reload_smart_colors

    # Move slow operations to the end (background)
    reload_betterlockscreen

    # Update rice integration
    update_current_rice

    # Show summary
    show_summary
}

# Parse arguments
case "${1:-}" in
    "help"|"-h"|"--help")
        echo "Enhanced Wal Reload Script with Smart Colors Integration"
        echo ""
        echo "Usage: $0 [option]"
        echo ""
        echo "Options:"
        echo "  (no args)      - Full reload of wal and all supported applications"
        echo "  help, -h       - Show this help"
        echo ""
        echo "Supported applications:"
        echo "  • i3 window manager (with smart color generation)"
        echo "  • Rofi application launcher"
        echo "  • EWW widgets (with smart color enhancement)"
        echo "  • Polybar (with smart color integration and auto-restart)"
        echo "  • Betterlockscreen"
        echo "  • Discord (via wal-discord)"
        echo "  • Kitty terminal"
        echo "  • Alacritty terminal"
        echo "  • VSCode (via wal-theme-vscode)"
        echo ""
        echo "Smart Colors Features:"
        echo "  • Theme-adaptive color selection for better readability"
        echo "  • Automatic semantic color mapping (error, success, info, etc.)"
        echo "  • Enhanced EWW color generation beyond pywal"
        echo "  • Polybar integration with environment-based smart colors"
        ;;
    *)
        main
        ;;
esac
