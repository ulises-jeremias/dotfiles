#!/usr/bin/env bash

## Copyright (C) 2019-2025 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## GTK Theme Utility Script for HorneroConfig
##
## This script provides command-line utilities for managing GTK themes
## within the rice system, including listing, applying, and detecting themes.
##
## Check full documentation at: https://github.com/ulises-jeremias/dotfiles/wiki
##
## Usage:
##     @script.name [OPTIONS] <command> [ARGUMENTS...]
##
## Options:
##     -h, --help      Show this help message.
##     -v, --verbose   Enable verbose output.
##     -d, --debug     Enable debug mode.
##     -q, --quiet     Suppress output.
##
## Commands:
##     list                    List all installed GTK themes
##     current                 Show current GTK theme
##     apply <theme>           Apply specific GTK theme
##     detect [wallpaper]      Detect optimal theme for wallpaper
##     rice [rice-name]        Apply GTK theme for specific rice
##     auto                    Auto-detect and apply optimal theme
##     icons                   List installed icon themes
##     info <theme>            Show information about a theme
##
## Examples:
##     @script.name list
##     @script.name apply Orchis-Dark-Compact
##     @script.name rice space
##     @script.name detect ~/Pictures/wallpaper.jpg
##     @script.name auto

set -euo pipefail

# Source EasyOptions for argument parsing
source ~/.local/lib/dots/easy-options/easyoptions.sh || exit

# Source EasyOptions for argument parsing
source ~/.local/lib/dots/easy-options/easyoptions.sh || exit

# Source the GTK theme manager - try multiple locations
gtk_theme_manager_paths=(
    "$HOME/.local/lib/dots/gtk-theme-manager.sh"
    "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../lib/dots/gtk-theme-manager.sh"
)

gtk_theme_manager_found=false
for path in "${gtk_theme_manager_paths[@]}"; do
    if [[ -f "$path" ]]; then
        source "$path"
        gtk_theme_manager_found=true
        break
    fi
done

if [[ "$gtk_theme_manager_found" != "true" ]]; then
    echo "Error: GTK theme manager not found in any of these locations:" >&2
    printf '  %s\n' "${gtk_theme_manager_paths[@]}" >&2
    exit 1
fi

# Color definitions for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Function to log messages with verbosity control
log() {
    local level="$1"
    shift
    local message="$*"

    if [[ "${quiet:-}" == "yes" ]] && [[ "$level" != "ERROR" ]]; then
        return 0
    fi

    local timestamp
    timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

    case "$level" in
        "ERROR")
            echo -e "${RED}‚ùå [ERROR] $message${NC}" >&2
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö†Ô∏è  [WARN] $message${NC}" >&2
            ;;
        "INFO")
            if [[ "${verbose:-}" == "yes" ]]; then
                echo -e "${BLUE}‚ÑπÔ∏è  [INFO] $message${NC}"
            fi
            ;;
        "DEBUG")
            if [[ "${debug:-}" == "yes" ]]; then
                echo -e "${PURPLE}üêõ [DEBUG] [$timestamp] $message${NC}" >&2
            fi
            ;;
        *)
            echo -e "$message"
            ;;
    esac
}

# Function to list installed GTK themes
cmd_list() {
    log "" "${BLUE}üìã Installed GTK themes:${NC}"
    log "" ""

    local themes
    themes=$(list_installed_gtk_themes)

    if [[ -z "$themes" ]]; then
        log "WARN" "No GTK themes found"
        return 1
    fi

    local current_theme
    current_theme=$(get_current_gtk_theme)
    log "DEBUG" "Current theme: $current_theme"

    while IFS= read -r theme; do
        if [[ "$theme" == "$current_theme" ]]; then
            log "" "  ${GREEN}‚úì${NC} $theme ${CYAN}(current)${NC}"
        else
            log "" "    $theme"
        fi
    done <<< "$themes"

    log "" ""
    log "" "${CYAN}üí° Tip:${NC} Use 'dots gtk-theme apply <theme>' to apply a theme"
}

# Function to show current theme
cmd_current() {
    local current_theme
    current_theme=$(get_current_gtk_theme)

    log "" "${BLUE}üé® Current GTK Theme:${NC} $current_theme"

    # Show additional info
    if [[ -f "$HOME/.config/gtk-3.0/settings.ini" ]]; then
        local icon_theme
        icon_theme=$(grep "^gtk-icon-theme-name=" "$HOME/.config/gtk-3.0/settings.ini" | cut -d'=' -f2)
        log "" "${BLUE}üéØ Icon Theme:${NC} $icon_theme"

        local dark_pref
        dark_pref=$(grep "^gtk-application-prefer-dark-theme=" "$HOME/.config/gtk-3.0/settings.ini" | cut -d'=' -f2)
        log "" "${BLUE}üåô Dark Theme Preference:${NC} $dark_pref"
    fi
}

# Function to apply specific theme
cmd_apply() {
    local theme_name="$1"
    local icon_theme="${2:-Numix-Circle}"
    local prefer_dark="${3:-false}"

    log "" "${BLUE}üé® Applying GTK Theme:${NC} $theme_name"
    log "DEBUG" "Icon theme: $icon_theme, prefer dark: $prefer_dark"

    if apply_gtk_theme "$theme_name" "$icon_theme" "$prefer_dark"; then
        log "" "${GREEN}‚úÖ Theme applied successfully${NC}"
    else
        log "ERROR" "Failed to apply theme"
        return 1
    fi
}

# Function to detect optimal theme
cmd_detect() {
    local wallpaper_path="${1:-}"

    if [[ -z "$wallpaper_path" ]]; then
        # Use current wallpaper
        wallpaper_path=$(cat "$HOME/.cache/wal/wal" 2>/dev/null || echo "")
        if [[ -z "$wallpaper_path" ]]; then
            echo -e "${RED}‚ùå No wallpaper specified and no current wallpaper found${NC}"
            return 1
        fi
    fi

    if [[ ! -f "$wallpaper_path" ]]; then
        echo -e "${RED}‚ùå Wallpaper file not found: $wallpaper_path${NC}"
        return 1
    fi

    echo -e "${BLUE}üîç Analyzing wallpaper:${NC} $(basename "$wallpaper_path")"

    local theme_info
    theme_info=$(detect_optimal_gtk_theme "$wallpaper_path")
    local detected_theme="${theme_info%:*}"
    local prefer_dark="${theme_info#*:}"

    echo -e "${GREEN}üéØ Detected optimal theme:${NC} $detected_theme"
    echo -e "${GREEN}üåô Dark preference:${NC} $prefer_dark"

    # Ask if user wants to apply
    read -p "Apply this theme? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cmd_apply "$detected_theme" "Numix-Circle" "$prefer_dark"
    fi
}

# Function to apply rice-specific theme
cmd_rice() {
    local rice_name="${1:-}"

    echo -e "${BLUE}üçö Applying GTK theme for rice:${NC} ${rice_name:-auto-detect}"

    if apply_rice_gtk_theme "$rice_name"; then
        echo -e "${GREEN}‚úÖ Rice GTK theme applied successfully${NC}"
    else
        echo -e "${RED}‚ùå Failed to apply rice GTK theme${NC}"
        return 1
    fi
}

# Function to auto-detect and apply
cmd_auto() {
    echo -e "${BLUE}ü§ñ Auto-detecting optimal GTK theme...${NC}"
    cmd_rice ""
}

# Function to list icon themes
cmd_icons() {
    echo -e "${BLUE}üéØ Installed Icon Themes:${NC}"
    echo ""

    local icon_dirs=(
        "/usr/share/icons"
        "/usr/local/share/icons"
        "$HOME/.icons"
        "$HOME/.local/share/icons"
    )

    local icons=()
    for icon_dir in "${icon_dirs[@]}"; do
        if [[ -d "$icon_dir" ]]; then
            while IFS= read -r -d '' icon_path; do
                local icon_name
                icon_name=$(basename "$icon_path")
                if [[ -f "$icon_path/index.theme" ]] || [[ -d "$icon_path/scalable" ]] || [[ -d "$icon_path/16x16" ]]; then
                    icons+=("$icon_name")
                fi
            done < <(find "$icon_dir" -maxdepth 1 -type d -print0)
        fi
    done

    # Remove duplicates and sort
    local unique_icons
    unique_icons=$(printf '%s\n' "${icons[@]}" | sort -u)

    local current_icon=""
    if [[ -f "$HOME/.config/gtk-3.0/settings.ini" ]]; then
        current_icon=$(grep "^gtk-icon-theme-name=" "$HOME/.config/gtk-3.0/settings.ini" | cut -d'=' -f2)
    fi

    while IFS= read -r icon; do
        if [[ "$icon" == "$current_icon" ]]; then
            echo -e "  ${GREEN}‚úì${NC} $icon ${CYAN}(current)${NC}"
        else
            echo -e "    $icon"
        fi
    done <<< "$unique_icons"
}

# Function to show theme information
cmd_info() {
    local theme_name="$1"

    echo -e "${BLUE}‚ÑπÔ∏è  Theme Information: $theme_name${NC}"
    echo ""

    # Find theme directories
    local theme_dirs=(
        "/usr/share/themes"
        "/usr/local/share/themes"
        "$HOME/.themes"
        "$HOME/.local/share/themes"
    )

    local found_path=""
    for theme_dir in "${theme_dirs[@]}"; do
        if [[ -d "$theme_dir/$theme_name" ]]; then
            found_path="$theme_dir/$theme_name"
            break
        fi
    done

    if [[ -z "$found_path" ]]; then
        echo -e "${RED}‚ùå Theme not found: $theme_name${NC}"
        return 1
    fi

    echo -e "${GREEN}üìÅ Location:${NC} $found_path"

    # Check what components are available
    echo -e "${GREEN}üß© Available Components:${NC}"
    if [[ -d "$found_path/gtk-2.0" ]]; then
        echo -e "  ‚úÖ GTK2"
    else
        echo -e "  ‚ùå GTK2"
    fi

    if [[ -d "$found_path/gtk-3.0" ]]; then
        echo -e "  ‚úÖ GTK3"
    else
        echo -e "  ‚ùå GTK3"
    fi

    if [[ -d "$found_path/gtk-4.0" ]]; then
        echo -e "  ‚úÖ GTK4"
    else
        echo -e "  ‚ùå GTK4"
    fi

    # Show index.theme if available
    if [[ -f "$found_path/index.theme" ]]; then
        echo ""
        echo -e "${GREEN}üìã Theme Metadata:${NC}"
        while IFS= read -r line; do
            if [[ "$line" =~ ^Name= ]]; then
                echo -e "  ${BLUE}Name:${NC} ${line#Name=}"
            elif [[ "$line" =~ ^Comment= ]]; then
                echo -e "  ${BLUE}Description:${NC} ${line#Comment=}"
            fi
        done < "$found_path/index.theme"
    fi
}

# Main script logic
main() {
    log "DEBUG" "Starting GTK theme manager with args: ${arguments[*]}"

    if [[ ${#arguments[@]} -eq 0 ]]; then
        log "ERROR" "No command specified. Use --help for usage information."
        exit 1
    fi

    local command="${arguments[0]}"
    local cmd_args=("${arguments[@]:1}")

    log "DEBUG" "Command: $command, args: ${cmd_args[*]}"

    case "$command" in
        "list"|"ls")
            cmd_list
            ;;
        "current"|"status")
            cmd_current
            ;;
        "apply"|"set")
            if [[ ${#cmd_args[@]} -eq 0 ]]; then
                log "ERROR" "Theme name required for apply command"
                log "" "Usage: $(basename "$0") apply <theme-name> [icon-theme] [prefer-dark]"
                exit 1
            fi
            cmd_apply "${cmd_args[@]}"
            ;;
        "detect"|"analyze")
            cmd_detect "${cmd_args[@]}"
            ;;
        "rice"|"r")
            cmd_rice "${cmd_args[@]}"
            ;;
        "auto"|"automatic")
            cmd_auto
            ;;
        "icons"|"icon")
            cmd_icons
            ;;
        "info"|"show")
            if [[ ${#cmd_args[@]} -eq 0 ]]; then
                log "ERROR" "Theme name required for info command"
                log "" "Usage: $(basename "$0") info <theme-name>"
                exit 1
            fi
            cmd_info "${cmd_args[0]}"
            ;;
        *)
            log "ERROR" "Unknown command '$command'"
            log "" "Use --help for available commands"
            exit 1
            ;;
    esac
}

# Run main function
main
