# HorneroConfig Dotfiles Project Rules

## üè† Project Overview

This is **HorneroConfig**, a comprehensive Linux dotfiles framework named after the hornero bird, renowned for its skillful nest-building. The framework transforms Linux desktops into functional and beautiful environments.

## üìÅ Project Structure

- `home/` - Chezmoi-managed dotfiles configuration
  - `dot_config/` - ~/.config configurations
  - `dot_local/` - ~/.local scripts and utilities
  - `dot_zsh/` - Zsh shell configuration
- `docs/` - Complete documentation (wiki + ADRs)
- `scripts/` - Installation and utility scripts
- `playground/` - Vagrant/Docker testing environment
- `lib/` - Shared libraries and utilities

## üõ†Ô∏è Technology Stack

- **Dotfiles Manager**: Chezmoi for cross-machine portability
- **Status Bar**: Polybar (modular with 20+ modules)
- **Widgets**: EWW (dashboard, powermenu, sidebar)
- **Launcher**: Rofi
- **Terminal**: Kitty (GPU-accelerated)
- **Shell**: Zsh + Powerlevel10k
- **Theming**: wpg/pywal + smart colors system
- **Window Managers**: i3, Openbox, XFCE4
- **Argument Parsing**: EasyOptions library

## üìù Coding Standards

### Shell Scripts

- Always use `#!/usr/bin/env bash` for bash scripts
- Use `set -euo pipefail` for strict error handling
- Follow Google Shell Style Guide principles
- Use double quotes around variables: `"${variable}"`
- Prefer `[[ ]]` over `[ ]` for conditionals

### EasyOptions Pattern

All `dots-*` scripts should use EasyOptions for argument parsing:

```bash
#!/usr/bin/env bash

## Copyright (C) 2019-2025 Ulises Jeremias Cornejo Fandos
## Licensed under MIT.
##
## Check full documentation at: https://github.com/ulises-jeremias/dotfiles/wiki
##
## Brief description of script functionality
##
## Usage:
##     @script.name [OPTION] ARGUMENTS...
##
## Options:
##     -h, --help                            Show this help message.
##     -v, --verbose                         Enable verbose output.
##         --option=VALUE                    Option with value.

source ~/.local/lib/dots/easy-options/easyoptions.sh || exit

# Script logic using variables: ${verbose}, ${option}, ${arguments[@]}
```

### Variable Naming

- Use `snake_case` for variables and functions
- Use `UPPER_CASE` for constants and environment variables
- Use descriptive names: `config_file` instead of `cf`
- Array variables: `bars=()`, then `bars+=("item")`

### Error Handling

- Always check command success: `command || handle_error`
- Use meaningful error messages
- Provide exit codes: `exit 1` for errors, `exit 0` for success
- Log errors appropriately

## üé® Rice System

- Each rice theme has: `config.sh`, `apply.sh`, `backgrounds/`, `preview.png`
- Rice configs define `POLYBAR_PROFILE` variable
- Apply scripts use `wpg` for wallpaper and color management
- Smart colors system provides theme-adaptive color selection

## üìä Polybar Configuration

- Profile-based system in `~/.config/polybar/profiles/`
- Modular config structure with separate files for bars and modules
- Smart color integration for theme-adaptive colors
- Window manager awareness (i3 vs openbox vs xfce4)

## üîß Script Development Rules

### New Scripts

1. Must use EasyOptions for argument parsing
2. Include proper documentation in `##` comments
3. Follow the established error handling patterns
4. Add to `dots-scripts.sh` registry if user-facing
5. Include comprehensive help text and examples

### Existing Script Modifications

- When modifying scripts that don't use EasyOptions, convert them
- Maintain backward compatibility when possible
- Update documentation to reflect changes
- Test thoroughly in the playground environment

### Testing

- Use `playground/` environment for safe testing
- Test window manager specific functionality
- Verify rice theme switching works correctly
- Check smart colors integration

## üöÄ Installation & Deployment

- Primary installation via one-line script
- AUR packages for Arch Linux users
- Chezmoi handles cross-machine synchronization
- Support for GitHub Codespaces, Gitpod, VS Code Remote

## üéØ Smart Colors System

- Theme-adaptive color selection for optimal readability
- Semantic color mapping (error, success, warning, info, accent)
- Integration with Polybar, EWW, i3, and all scripts
- Automatic updates when wallpapers change

## üìñ Documentation Standards

- Wiki pages for major components
- ADRs (Architecture Decision Records) for important decisions
- Inline documentation for complex functions
- Examples in help text
- Keep README.md updated with latest features

## üîí Security Considerations

- Built-in security auditing tools
- No hardcoded secrets in version control
- Secure handling of credentials via chezmoi
- Regular security scans and updates

## üß™ Testing Guidelines

- Vagrant-based testing environment
- Support for multiple Linux distributions
- GUI testing for window managers
- Automated provisioning scripts

## ü§ù Contribution Guidelines

- Follow established patterns and conventions
- Use EasyOptions for new scripts
- Comprehensive testing before submission
- Update documentation for new features
- Maintain cross-platform compatibility

## üì¶ Dependencies Management

- Core dependencies: git, curl, wget, chezmoi, zsh
- Window manager deps: i3, openbox, polybar, rofi, picom
- Optional deps: kitty, nvim, tmux, ranger, btop
- Use `dots-dependencies` script for management

## üé® Theming Integration

- All components must integrate with smart colors
- Support for wpg/pywal color schemes
- Rice theme coordination across all applications
- Automatic color refresh on wallpaper changes

## üí° Development Tips

- Use `dots --list` to see all available scripts
- Test with `./bin/play` for safe environment
- Check logs in `~/.cache/dots/` for debugging
- Use `chezmoi diff` before applying changes
- Follow the hornero bird philosophy: build robust, functional environments

## üîÑ Maintenance

- Regular updates to dependencies
- Security auditing with built-in tools
- Log rotation and cleanup
- Performance monitoring and optimization
